#include<iostream>
#include<string>
using namespace std;

/*
	循环跟递归类似, 可以实现相似的功能
	递归需要有约束条件
	循环的效率更高, 递归的代码更简洁
*/

// Case: 阶乘 ————————————————————————————————————————————————————————————————
// for 循环实现阶乘函数  =>  小乘到大
int factorial(int n) {
	int res = 1;
	for(int i = 1; i <= n; i++) {
		res *= i;
	}
}


// 递归方式实现阶乘函数 (先假设知道了 n-1 个数的相乘结果)   =>    f(n) = f(n - 1) * n
int factorial2(int n) {
	// 基准情况, 到 1 则退出递归
	if(n == 1) { // n - 1 需要限定不能小于 0 ！ 需要定义基准情况！
		return 1; //🔥 最后返回 1  => 1 * 2 * 3 * 4 * 5
	}
	return factorial2(n - 1) * n; //🔥 f(4) * 5 、 f(3）* 4、f(2）* 3 、f(1）* 2
}



// Case: 斐波那契数列（黄金分割数列, 又一个数字等于前两个数字的和） ————————————————————————————————————————————————————————————————
// 用递归的方式实现最简单  1,1,2,3,5,8,13,21,34,55
int fib(int n) {
	// 基准情况, 前两个数都是 1, 则退出递归
	if(n == 1 || n == 2) { // 2 表示第二项
		return 1;
	}

	return fib(n - 1) + fib(n - 2);
}



int main() {

	cout << "5 的阶乘等于: " << factorial2(5) << endl;  //120

	cout << "斐波那契数列的第 10 项: " << fib(10) << endl; //34
}