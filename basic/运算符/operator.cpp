#include<iostream>;
using namespace std;




/*

	// 运算符优先级：
		一元运算符
			+ xx
			- xx

		乘除法、取余运算符
			*
			/
			%

		加减运算符
			+
			-

	// 数组赋值
		int arrA[] = [1,2,3,4,5]

	// 连续赋值, 赋值的优先级比较低, 会先执行运算符
	 	a = b = 6


	复合运算符
		a = 10
		b = 20
		b += a, 相当于 b = b + a, b = 30 （加法 + 赋值）
		b -= a, 相当于 b = b - a, b = 10 （减法 - 赋值）
		b *= a, 相当于 b = b * a, b = 200 （乘法 * 赋值）
		b /= a, 相当于 b = b / a, b = 2 （除法 / 赋值）
		b %= a, 相当于 b = b % a, b = 0 （取余 % 赋值）

	位运算符
		<<= 表示左移赋值, 比如 a <<= 2, 相当于 a = a << 2, 就是把 a 的二进制数向左移动 2 位
		>>= 表示右移赋值, 比如 a >>= 2, 相当于 a = a >> 2, 就是把 a 的二进制数向右移动 2 位
		&= 表示按位与赋值, 比如 a &= 2, 相当于 a = a & 2, 就是把 a 的二进制数与 2 的二进制数进行与运算
		^=  表示按位异或赋值, 比如 a ^= 2, 相当于 a = a ^ 2, 就是把 a 的二进制数与 2 的二进制数进行异或运算
		|= 

	递增递减运算符
		a++ 相当于 a = a + 1	
		a-- 相当于 a = a - 1
		
		注意, 有前置跟后置的区别
			前置的话就是 ++a , 先加 1 再返回结果
			后置的话就是 a++ , 先返回结果再加 1

*/

int main() {
	// 整数的相除还是整数
	int a = 20, b = 6;
	cout << a / b << endl; // 3

	// 浮点数的相除是浮点数, 浮点数除以整数结果也是浮点数
	float c = 20, d = 6;
	cout << c / d << endl; // 3.33333
	

	// 取余运算(🚀只能针对两个整数而不能针对浮点数！！), 不是得到商, 而是得到余数, 取余数也可能是负数
	cout << a % b << endl; // 2
	cout << -a % b << endl; // -2


	// 递增递减
	int i = 0, f = 0, j, k;
	k = i++; // 🔥 i = k , i ++, 此时 k = 0
	j = ++f; // 🔥 j = i + 1, 此时 j = 1


	cout << "j 为:" << j << "k 为:" << k << endl; // j 为:1, k 为:0

	cin.get();
}