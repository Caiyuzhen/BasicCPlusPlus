#include<iostream>
using namespace std;


int main() {
	int arr[5] = {1, 2, 3, 4, 5}; //需要定义数组的【类型】跟【长度 (option)】


	// 🚀定义数组的长度需要用【常量】而不能用变量！
	const int n = 7;
	float arr2[] = {1.2, 2.3, 3.21, 4.17, 5.24, 6.86, 7.31}; //数组长度不填的话可以背推断出来

	// 如果初始值少于长度， 剩余元素都会变为 0 
	int arr3[5] = {1, 2, 3}; // arr3 = {1, 2, 3, 0, 0}

	// 不能用一个数组给另一个数组赋值

	// 默认填充值为 0xcc (十六进制)  二进制为 11001100



	// 访问数组 ************************************************************
	cout << "数组数量:"  << arr[2] << endl;

	// 🌟 获取数组长度的方法 = 数组所占空间 / 每个元素所占空间（比如 int 类型占 4 个空间)  =>  或者是 / 数组[0] , 因为第一个元素肯定存在
	cout << "数组长度:" << sizeof(arr) / sizeof(arr[0]) << endl; // 用总的内存空间除以一行占多少内存空间, 得出行数

	// 🔥 遍历访问所有元素【方法一】
	int length = sizeof(arr) / sizeof(arr[0]);
	for(int i = 0; i < length; i ++) {
		cout << "a[" << i << "] = " << arr[i] << endl;
	}


	// 🔥 遍历访问所有元素 【方法二, C++11 以上提供, 但没法捕获下标】
	for(int num : arr)  {
		cout << num << endl;
	}



	// 🌟 定义多维数组 ************************************************************
	int smartArr[3][4] = { //【可以省略第一个 ”行数“】 , 3 行 4 列, 在内存结构中就是一块连续的存储空间
		{1, 2, 3, 4}, // 第一行
		{5, 6, 7, 8}, // 第二行
		{9, 10, 11, 12} // 第三行
	};

	int superArr[2][3][3] = { //【可以省略第一个 ”行数“】 , 2 个 3 行 3 列, 在内存结构中就是一块连续的存储空间
		{ // 第一个 3 行 3 列
			{0, 1, 2}, // 第一行
			{3, 4, 5}, // 第二行
			{6, 7, 8} // 第三行
		},
		{ // 第二个 3 行 3 列
			{9, 10, 11}, // 第一行
			{12, 13, 14}, // 第二行
			{15, 16, 17} // 第三行
		}
	}; 

	// 👆写法等价于
	int superArrrr[3][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};


	// 第一个数可以进行类型推断
	int superAAArrr[][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};




	//访问多维数组 ************************************************************
	cout << "访问多维数组" << smartArr[1][3] << endl; // 8



	// ⚡️ 遍历访问多维数组
	// 先计算数组的长度  //smartArr[0] 是一行, sizeof 计算出这一行所占的内存空间, 得出类型是什么, 然后用总的内存空间除以这个类型的内存空间, 得出行数
	int totalRAM = sizeof(smartArr); // 计算出数组所占的内存空间
	int rowRAM = sizeof(smartArr[0]); // 计算出每一行所占的内存空间
	int elementRAM = sizeof(smartArr[0][0]); // 计算出一个元素所占的内存空间 （看第一行第一个即可）


	int row = totalRAM / rowRAM; // 得出总行数为 3 行
	int element = rowRAM / elementRAM; // 每一行有多少个元素（多少列）, 算出为 4 列


	for(int i = 0; i < row; i ++ ) { //遍历每行
		for(int  k = 0; k < element; k ++ ) { //遍历每列
			cout <<  smartArr[i][k] <<  "\t"; // 打印每行的每列元素, "\t"  为制表符分割
		}
		cout << "\n" << endl; 
	}

	cin.get();
}
